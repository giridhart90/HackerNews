{"version":3,"sources":["components/HackerTable.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["HackerTable","props","handlePrevious","setState","prevState","pageNo","setTimeout","handleAPICall","state","disabled","handleNext","commentsData","axios","get","this","then","response","data","hits","storageNews","JSON","parse","localStorage","getItem","hasOwnProperty","getComments","e","id","commentsVal","forEach","item","objectID","points","handleVoteHide","filter","updatedNews","setItem","stringify","clear","window","location","reload","className","Table","striped","size","responsive","map","key","num_comments","onClick","handleUpVote","title","url","split","author","created_at","handleHideNews","handleClearStorage","Spinner","style","width","height","Component","Chart","lineChartData","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.202deb46.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Table, Spinner } from 'reactstrap';\r\n\r\nclass HackerTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            commentsData: null,\r\n            pageNo: 1,\r\n            disabled: true\r\n        }\r\n    }\r\n\r\n    //api call\r\n    handleAPICall() {\r\n        axios.get(`https://hn.algolia.com/api/v1/search?page=${this.state.pageNo}`)\r\n            .then(response => {\r\n                const commentsData = response.data.hits;\r\n                const storageNews = JSON.parse(localStorage.getItem(\"updatedNews\"));\r\n                //if updated news in localstorage\r\n                if (storageNews && storageNews.hasOwnProperty(this.state.pageNo)) {\r\n                    let getComments = storageNews[this.state.pageNo];\r\n                    this.setState({ commentsData: getComments });\r\n                } else {\r\n                    this.setState({ commentsData });\r\n                }\r\n            });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleAPICall();\r\n    }\r\n\r\n    //on click of up vote button action\r\n    handleUpVote(e, id) {\r\n        let commentsVal = this.state.commentsData;\r\n\r\n        commentsVal.forEach((item) => {\r\n            if (item.objectID === id) {\r\n                return item.points = ++item.points;\r\n            }\r\n        });\r\n        this.setState({ commentsData: commentsVal });\r\n\r\n        this.handleVoteHide(commentsVal);\r\n    }\r\n\r\n    //on click of hide button action\r\n    handleHideNews(e, id) {\r\n        let commentsVal = this.state.commentsData.filter(item => item.objectID !== id);\r\n        this.setState({ commentsData: commentsVal });\r\n        this.handleVoteHide(commentsVal);\r\n    }\r\n\r\n    //on click of vote button action\r\n    handleVoteHide(commentsVal) {\r\n        let updatedNews = {};\r\n        let storageNews = localStorage.getItem(\"updatedNews\");\r\n        if (storageNews) {\r\n            updatedNews = JSON.parse(storageNews);\r\n        }\r\n        updatedNews[this.state.pageNo] = commentsVal;\r\n\r\n        localStorage.setItem(\"updatedNews\", JSON.stringify(updatedNews));\r\n    }\r\n\r\n    //handle upvote and hide  \r\n    handlePrevious = () => {\r\n        this.setState(prevState => {\r\n            return { pageNo: prevState.pageNo - 1 }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.handleAPICall();\r\n\r\n            if (this.state.pageNo === 1) {\r\n                this.setState({ disabled: true });\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    //on click of next button action\r\n    handleNext = () => {\r\n        this.setState(prevState => {\r\n            return { pageNo: prevState.pageNo + 1, disabled: false }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.handleAPICall();\r\n        }, 10);\r\n    }\r\n\r\n    //on click clear storage\r\n    handleClearStorage() {\r\n        localStorage.clear();\r\n        window.location.reload(false);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.commentsData) {\r\n            return (\r\n                <div className=\"hackerTable\">\r\n                    <Table striped size=\"sm\" responsive>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>Comments</th>\r\n                                <th>Vote Count</th>\r\n                                <th>UpVote</th>\r\n                                <th>News Details</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {this.state.commentsData.map((item) => {\r\n                                return <tr key={item.objectID}>\r\n                                    <td>{item.num_comments}</td>\r\n                                    <td>{item.points}</td>\r\n                                    <td><button onClick={(e) => this.handleUpVote(this, item.objectID)}><div className=\"upvote\"></div></button></td>\r\n                                    <td>\r\n                                        <b>{item.title} </b>\r\n                                        ({item.url ? item.url.split('/')[2] : \" \"})\r\n                                        by <b>{item.author}</b> | {item.created_at ? item.created_at.split('T')[0] : \" \"}\r\n                                        <button onClick={(e) => this.handleHideNews(this, item.objectID)}>[ hide ]</button>\r\n                                    </td>\r\n                                </tr>\r\n                            })}\r\n                        </tbody>\r\n                    </Table>\r\n                    <div className=\"prevNext\">\r\n                        <button onClick={this.handlePrevious} disabled={this.state.disabled}>Previous</button> |\r\n                        <button onClick={this.handleNext}>Next</button> |\r\n                        <button onClick={this.handleClearStorage}>Remove storage values</button>\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            return (\r\n                <Spinner style={{ width: '3rem', height: '3rem' }} />\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default HackerTable;","import React, { Component } from 'react';\r\nimport { LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line } from 'recharts';\r\n\r\nclass Chart extends Component {\r\n\r\n    state = {\r\n        lineChartData: [\r\n            {\r\n                \"name\": \"Page A\",\r\n                \"ID\": 2400,\r\n                \"amt\": 2400\r\n            },\r\n            {\r\n                \"name\": \"Page B\",\r\n                \"ID\": 1398,\r\n                \"amt\": 2210\r\n            },\r\n            {\r\n                \"name\": \"Page C\",\r\n                \"ID\": 9800,\r\n                \"amt\": 2290\r\n            },\r\n            {\r\n                \"name\": \"Page D\",\r\n                \"ID\": 3908,\r\n                \"amt\": 2000\r\n            },\r\n            {\r\n                \"name\": \"Page E\",\r\n                \"ID\": 4800,\r\n                \"amt\": 2181\r\n            },\r\n            {\r\n                \"name\": \"Page F\",\r\n                \"ID\": 3800,\r\n                \"amt\": 2500\r\n            },\r\n            {\r\n                \"name\": \"Page G\",\r\n                \"ID\": 4300,\r\n                \"amt\": 2100\r\n            }\r\n        ]\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"lineChart\">\r\n                <LineChart width={900} height={250} data={this.state.lineChartData}\r\n                    margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"name\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Line type=\"monotone\" dataKey=\"ID\" stroke=\"#8884d8\" />\r\n                </LineChart>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import React from 'react';\nimport './App.css';\nimport HackerTable from './components/HackerTable';\nimport Chart from './components/Chart';\n\nfunction App() {\n  return (\n    <div className=\"hackersApp\">\n      <HackerTable />\n      <Chart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}