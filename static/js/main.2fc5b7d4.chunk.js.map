{"version":3,"sources":["components/Chart.js","components/HackerTable.js","App.js","serviceWorker.js","index.js"],"names":["Chart","charVal","this","props","getStateValue","chartData","className","width","aspect","data","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","Component","HackerTable","handlePrevious","setState","prevState","pageNo","setTimeout","handleAPICall","state","disabled","handleNext","commentsData","error","axios","get","then","response","hits","storageNews","JSON","parse","localStorage","getItem","hasOwnProperty","getComments","generateChartData","catch","e","id","commentsVal","forEach","item","objectID","points","updateLocalStorage","filter","updatedNews","setItem","stringify","aryVal","map","chartObj","votes","ID","clear","window","location","reload","Table","striped","size","responsive","key","num_comments","onClick","handleUpVote","role","aria-describedby","title","url","split","author","created_at","handleHideNews","handleClearStorage","Spinner","style","height","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2fc5b7d4.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { LineChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Line, ResponsiveContainer } from 'recharts';\r\n\r\nclass Chart extends Component {\r\n\r\n    render() {\r\n        const charVal = this.props.getStateValue.chartData;\r\n        return (\r\n            <div className=\"lineChart\">\r\n                <ResponsiveContainer width='99%' aspect={3.0}>\r\n                    <LineChart data={charVal}\r\n                        margin={{ top: 5, right: 30, left: 20, bottom: 5 }}>\r\n                        <CartesianGrid strokeDasharray=\"3 3\" />\r\n                        <XAxis dataKey=\"ID\" />\r\n                        <YAxis dataKey=\"votes\" />\r\n                        <Tooltip />\r\n                        <Legend />\r\n                        <Line type=\"monotone\" dataKey=\"ID\" stroke=\"orange\" />\r\n                        <Line type=\"monotone\" dataKey=\"votes\" stroke=\"blue\" />\r\n                    </LineChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Table, Spinner } from 'reactstrap';\r\nimport Chart from './Chart';\r\n\r\nclass HackerTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            commentsData: null,\r\n            pageNo: 1,\r\n            disabled: true,\r\n            chartData: null,\r\n            error: null\r\n        }\r\n    }\r\n\r\n    //api call\r\n    handleAPICall() {\r\n        axios.get(`https://hn.algolia.com/api/v1/search?page=${this.state.pageNo}`)\r\n            .then(response => {\r\n                const commentsData = response.data.hits;\r\n                const storageNews = JSON.parse(localStorage.getItem(\"updatedNews\"));\r\n                //if updated news in localstorage\r\n                if (storageNews && storageNews.hasOwnProperty(this.state.pageNo)) {\r\n                    let getComments = storageNews[this.state.pageNo];\r\n                    this.setState({ commentsData: getComments });\r\n                } else {\r\n                    this.setState({ commentsData });\r\n                }\r\n                this.generateChartData(this.state.commentsData);\r\n            })\r\n            .catch(error => this.setState({ error }));\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.handleAPICall();\r\n    }\r\n\r\n    //on click of up vote button action\r\n    handleUpVote(e, id) {\r\n        let commentsVal = this.state.commentsData;\r\n\r\n        commentsVal.forEach((item) => {\r\n            if (item.objectID === id) {\r\n                return item.points = ++item.points;\r\n            }\r\n        });\r\n        this.setState({ commentsData: commentsVal });\r\n\r\n        this.updateLocalStorage(commentsVal);\r\n        this.generateChartData(commentsVal);\r\n    }\r\n\r\n    //on click of hide button action\r\n    handleHideNews(e, id) {\r\n        let commentsVal = this.state.commentsData.filter(item => item.objectID !== id);\r\n        this.setState({ commentsData: commentsVal });\r\n        this.updateLocalStorage(commentsVal);\r\n        this.generateChartData(commentsVal);\r\n    }\r\n\r\n    //on click of vote button action\r\n    updateLocalStorage(commentsVal) {\r\n        let updatedNews = {};\r\n        let storageNews = localStorage.getItem(\"updatedNews\");\r\n        if (storageNews) {\r\n            updatedNews = JSON.parse(storageNews);\r\n        }\r\n        updatedNews[this.state.pageNo] = commentsVal;\r\n\r\n        localStorage.setItem(\"updatedNews\", JSON.stringify(updatedNews));\r\n    }\r\n\r\n    //generate chart data\r\n    generateChartData(commentsVal) {\r\n        let aryVal = [];\r\n\r\n        aryVal = commentsVal.map(item => {\r\n            let chartObj = {};\r\n            chartObj.votes = item.points;\r\n            chartObj.ID = item.objectID;\r\n            return chartObj;\r\n        });\r\n\r\n        this.setState({ chartData: aryVal });\r\n    }\r\n\r\n    //handle upvote and hide  \r\n    handlePrevious = () => {\r\n        this.setState(prevState => {\r\n            return { pageNo: prevState.pageNo - 1 }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.handleAPICall();\r\n\r\n            if (this.state.pageNo === 1) {\r\n                this.setState({ disabled: true });\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    //on click of next button action\r\n    handleNext = () => {\r\n        this.setState(prevState => {\r\n            return { pageNo: prevState.pageNo + 1, disabled: false }\r\n        });\r\n\r\n        setTimeout(() => {\r\n            this.handleAPICall();\r\n        }, 10);\r\n    }\r\n\r\n    //on click clear storage\r\n    handleClearStorage() {\r\n        localStorage.clear();\r\n        window.location.reload(false);\r\n    }\r\n\r\n    render() {\r\n        if (this.state.commentsData) {\r\n            return (\r\n                <>\r\n                    <div className=\"hackerTable\">\r\n                        <Table striped size=\"sm\" responsive>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Comments</th>\r\n                                    <th>Vote Count</th>\r\n                                    <th>UpVote</th>\r\n                                    <th>News Details</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {this.state.commentsData.map((item) => {\r\n                                    return <tr key={item.objectID}>\r\n                                        <td>{item.num_comments}</td>\r\n                                        <td>{item.points}</td>\r\n                                        <td>\r\n                                            <button onClick={(e) => this.handleUpVote(this, item.objectID)} role=\"button\" aria-describedby=\"upvoteDesc\">\r\n                                                <div className=\"upvote\"></div>\r\n                                            </button>\r\n                                            <p id=\"upvoteDesc\" className=\"hide\">Increase the vote count</p>\r\n                                        </td>\r\n                                        <td>\r\n                                            <b>{item.title} </b>\r\n                                            ({item.url ? item.url.split('/')[2] : \" \"})\r\n                                            by <b>{item.author}</b> | {item.created_at ? item.created_at.split('T')[0] : \" \"}\r\n                                            <button onClick={(e) => this.handleHideNews(this, item.objectID)} role=\"button\" aria-describedby=\"hideDesc\">[ hide ]</button>\r\n                                            <p id=\"hideDesc\" className=\"hide\">Hide selected rows</p>\r\n                                        </td>\r\n                                    </tr>\r\n                                })}\r\n                            </tbody>\r\n                        </Table>\r\n                        <div className=\"prevNext\">\r\n                            <button onClick={this.handlePrevious} role=\"button\" aria-describedby=\"prevDesc\" disabled={this.state.disabled}>Previous</button> |\r\n                            <button onClick={this.handleNext} role=\"button\" aria-describedby=\"nextDesc\">Next</button>\r\n                            <p id=\"prevDesc\" className=\"hide\">shows previous 20 grid results</p>\r\n                            <p id=\"nextDesc\" className=\"hide\">shows next 20 grid results</p>\r\n                        </div>\r\n                        <button onClick={this.handleClearStorage} role=\"button\" className=\"storage\" aria-describedby=\"storageDesc\">Remove storage values</button>\r\n                        <p id=\"storageDesc\" className=\"hide\">Remove local storage values from browser</p>\r\n                    </div>\r\n                    <Chart getStateValue={this.state} aria-describedby=\"chartDesc\" />\r\n                    <p id=\"chartDesc\" className=\"hide\">Displaying line chart</p>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <div className=\"spinner\">\r\n                    <Spinner style={{ width: '3rem', height: '3rem' }} aria-describedby=\"spinnerDesc\" />\r\n                    <p id=\"spinnerDesc\" className=\"hide\">Loading...</p>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default HackerTable;","import React from 'react';\nimport './App.css';\nimport HackerTable from './components/HackerTable';\n\nfunction App() {\n  return (\n    <div className=\"hackersApp\">\n      <HackerTable />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}